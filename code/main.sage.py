

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_20 = Integer(20); _sage_const_2 = Integer(2); _sage_const_10 = Integer(10); _sage_const_3 = Integer(3); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_0p0003 = RealNumber('0.0003'); _sage_const_5 = Integer(5); _sage_const_8 = Integer(8); _sage_const_1 = Integer(1)
from sage.all import *

var('s', 'n', 'ds', 'dn', 'ut', 'un')

qf = qepcad_formula

s_min = _sage_const_0 
s_max = _sage_const_20 
n_min = -_sage_const_2 
n_max = _sage_const_2 
v_x_min = _sage_const_0 
v_x_max = _sage_const_10 
v_y_min = -_sage_const_2 
v_y_max = _sage_const_2 
a_x_min = -_sage_const_3 
a_x_max = _sage_const_6 
a_y_min = -_sage_const_4 
a_y_max = _sage_const_4 
C = _sage_const_0p0003 
dpsi_min = -_sage_const_5 
dpsi_max = _sage_const_5 
apsi_min = -_sage_const_8 
apsi_max = _sage_const_8 

term1 = (_sage_const_1  - n * C)
Z = qf.and_(
    v_x_min <= ds * term1,
    ds * term1 <= v_x_max,
    dpsi_min <= C * ds,
    C * ds <= dpsi_max,
    apsi_min <= C * ut,
    C * ut <= apsi_max,
    a_x_min <= term1 * ut - _sage_const_2  * dn * C * ds,
    term1 * ut - _sage_const_2  * dn * C * ds <= a_x_max,
    a_y_min <= un + C * ds * ds * term1,
    un + C * ds * ds * term1 <= a_y_max
)



F = qf.forall(
    s,
    qf.implies(
        qf.and_(
            s_min <= s,
            s <= s_max
        ),
        Z
    )
)
print("Formula", F)
# Use options to reduce QEPCAD overhead
result = qepcad(F)
print("Result:", result)

